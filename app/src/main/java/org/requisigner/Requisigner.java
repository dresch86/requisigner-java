/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.requisigner;

import java.io.IOException;

import io.vertx.core.Vertx;
import io.vertx.core.Promise;
import io.vertx.core.VertxOptions;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.net.PemKeyCertOptions;

import io.vertx.core.http.HttpServer;
import io.vertx.core.http.HttpServerOptions;

import io.vertx.core.json.JsonObject;

import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;

import org.apache.commons.cli.Options;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.interactive.form.PDField;
import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;

public class Requisigner extends AbstractVerticle {
    private HttpServer hsHttpHandler;
    private Configuration cfgConfigHandler;

    private static final Logger lMainLogger = LogManager.getLogger(Requisigner.class.getName());

    public Requisigner(String[] args, Options ops) {
        cfgConfigHandler = new Configuration(args, ops);
    }

    private void getDocumentTemplate(RoutingContext routingContext) {

    }

    private void getSignaturePlaceholders(RoutingContext routingContext) {
        String sFilename = routingContext.pathParam("filename");
        String sTemplateId = routingContext.pathParam("template_id");
        String sAbsoluteFilepath = cfgConfigHandler.getTemplatesDir() + "/" + sTemplateId + "/" + sFilename;

        vertx.fileSystem().readFile(sAbsoluteFilepath, (response) -> {
            if (response.succeeded()) {

                try {
                    PDDocument pdfTemplateVersion = Loader.loadPDF(response.result().getBytes());
                    PDAcroForm pdfForm = new PDAcroForm(pdfTemplateVersion);

                    for (PDField field : pdfForm.getFields()) {
                        System.out.println(field.getPartialName());
                    }

                    pdfTemplateVersion.getSignatureFields();

                } catch (IOException e) {
                   
                    e.printStackTrace();
                }

                routingContext.response().end();
            } else {

            }
        });
    }

    private void listen() {
        Router rMainRouter = Router.router(vertx);
        rMainRouter.route().handler(BodyHandler.create().setUploadsDirectory(System.getProperty("java.io.tmpdir")));
        rMainRouter.get("/templates/version/placeholders/:template_id/:filename").handler(this::getSignaturePlaceholders);

        if (cfgConfigHandler.getSslConfig().getBoolean("enable", false)) {
            JsonObject joSslConfig = cfgConfigHandler.getSslConfig();
            PemKeyCertOptions pkoPemCfg = new PemKeyCertOptions();
            pkoPemCfg.setKeyPath(joSslConfig.getString("privateKey"))
            .setCertPath(joSslConfig.getString("cert"));

            HttpServerOptions httpOptions = new HttpServerOptions();
            httpOptions.setSsl(true);
            httpOptions.setPemKeyCertOptions(pkoPemCfg);
            hsHttpHandler = vertx.createHttpServer(httpOptions);
        } else {
            hsHttpHandler = vertx.createHttpServer();
        }

        hsHttpHandler.requestHandler(rMainRouter)
        .listen(cfgConfigHandler.getPort(), cfgConfigHandler.getAddress(), res -> {
            if (res.succeeded()) {
                lMainLogger.info("Requisigner listening");
                System.out.println("Requisigner listening for requests...");
            } else {
                lMainLogger.fatal(res.cause().getMessage());
                System.out.println("Requisigner failed to start...");
            }
        });
    }

    @Override
    public void start(Promise<Void> start) {
        listen();
        start.complete();
    }

    @Override
    public void stop(Promise<Void> stop) {
        hsHttpHandler.close();
        stop.complete();
    }

    public static void main(String[] args) {
        Options opCLIOps = new Options();
        opCLIOps.addOption("c", "config", true, "Path to configuration file");
        
        VertxOptions voVxOps = new VertxOptions();
        //voVxOps.setPreferNativeTransport(true);
        
        Vertx vertx = Vertx.vertx(voVxOps);
        Requisigner rsAppInstance = new Requisigner(args, opCLIOps);

        vertx.deployVerticle(rsAppInstance, (result) -> {
            if (result.succeeded()) {
                lMainLogger.info("Requisigner deployed...");
            } else {
                lMainLogger.fatal(result.cause());
                vertx.close();
            }
        });
    }
}
