/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.quillsigner;

import io.vertx.core.Vertx;
import io.vertx.core.Promise;
import io.vertx.core.VertxOptions;
import io.vertx.core.AbstractVerticle;

import io.vertx.core.net.SocketAddress;
import io.vertx.core.net.PemKeyCertOptions;

import io.vertx.core.http.HttpServer;
import io.vertx.core.http.HttpServerOptions;

import io.vertx.core.json.JsonObject;

import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

public class QuillSigner extends AbstractVerticle {
    private HttpServer hsQuillService;
    private Configuration cfgServiceConfig;

    private static final Logger lMainLogger = LogManager.getLogger(QuillSigner.class.getName());

    public QuillSigner(String path) {

    }

    private void getDocumentTemplate(RoutingContext routingContext) {

    }

    private void getDocumentTemplateList(RoutingContext routingContext) {

    }

    private void listen() {
        Router rMainRouter = Router.router(vertx);
        rMainRouter.route().handler(BodyHandler.create());
        rMainRouter.get("/documents/templates").handler(this::getDocumentTemplateList);
        rMainRouter.get("/documents/templates/:documentId").handler(this::getDocumentTemplate);

        if (cfgServiceConfig.getSslConfig().getBoolean("enable", false)) {
            JsonObject joSslConfig = cfgServiceConfig.getSslConfig();
            PemKeyCertOptions pkoPemCfg = new PemKeyCertOptions();
            pkoPemCfg.setKeyPath(joSslConfig.getString("privateKey"))
            .setCertPath(joSslConfig.getString("cert"));

            HttpServerOptions httpOptions = new HttpServerOptions();
            httpOptions.setSsl(true);
            httpOptions.setPemKeyCertOptions(pkoPemCfg);
            hsQuillService = vertx.createHttpServer(httpOptions);
        } else {
            hsQuillService = vertx.createHttpServer();
        }

        hsQuillService.requestHandler(rMainRouter)
        .listen(cfgServiceConfig.getPort(), cfgServiceConfig.getAddress(), res -> {
            if (res.succeeded()) {
                lMainLogger.info("QuillSigner listening for requests...OK");
            } else {
                lMainLogger.fatal("QuillSigner listening for requests...FAILED");
            }
        });
    }

    @Override
    public void start(Promise<Void> start) {
        listen();
        start.complete();
    }

    @Override
    public void stop(Promise<Void> stop) {
        hsQuillService.close();
        stop.complete();
    }

    public static void main(String[] args) {
        VertxOptions voVxOps = new VertxOptions();
        voVxOps.setPreferNativeTransport(true);

        Vertx vertx = Vertx.vertx(voVxOps);
    }
}
