/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // For non-modularized packaging
    id 'org.beryx.runtime' version '1.12.2'

    // For FAT jat
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

sourceCompatibility = JavaVersion.VERSION_14
targetCompatibility = JavaVersion.VERSION_14

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // https://search.maven.org/artifact/org.apache.logging.log4j/log4j-core/2.13.3/jar
    implementation 'org.apache.logging.log4j:log4j-core:2.13.3'

    // https://search.maven.org/artifact/org.apache.logging.log4j/log4j-api/2.13.3/jar
    implementation 'org.apache.logging.log4j:log4j-api:2.13.3'

    // https://search.maven.org/artifact/org.javatuples/javatuples/1.2/jar
    implementation 'org.javatuples:javatuples:1.2'

    // https://mvnrepository.com/artifact/io.vertx/vertx-web
    implementation 'io.vertx:vertx-web:4.2.4'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation 'commons-cli:commons-cli:1.4'

    // https://mvnrepository.com/artifact/io.netty/netty-transport-native-epoll
    implementation 'io.netty:netty-transport-native-epoll:4.1.73.Final'

    // https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox
    implementation 'org.apache.pdfbox:pdfbox:3.0.0-RC1'
}

def propertiesFile = project.file('local.properties')
def testConfig = ""

if (propertiesFile.exists()) {
    Properties properties = new Properties()
    properties.load(propertiesFile.newDataInputStream())
    testConfig = properties.getProperty('application.test.config')
} else {
    testConfig = "..\\config\\config.example.json"
}

run {
    args = ["--config=" + testConfig]
}

application {
    // Define the main class for the application.
    mainClass = 'org.requisigner.Requisigner'
    mainClassName = 'org.requisigner.Requisigner'
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        noConsole = false
    }

    jpackage {
        def currentOS = org.gradle.internal.os.OperatingSystem.current()
        imageName = 'Requisigner'

        installerOptions += [
            '--description', 'A microservice for digitally signing PDF files',
            '--copyright', 'Copyright 2022 Daniel J. Resch, Ph.D.'
        ]

        if (currentOS.isWindows()) {
            installerName = 'requisigner_win_x64'
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOS.isLinux()) {
            installerName = 'requisigner_linux_x64'
            installerOptions += ['--type', 'deb', '--linux-shortcut', '--linux-app-category', 'Office', '--linux-menu-group', 'Application']
        } else if (currentOS.isMacOsX()) {
            installerName = 'requisigner_macos_x64'
        } else {
            println "Unsupported OS"
            System.exit(1)
        }
    }
}